/*
 * @copyright 한국기술교육대학교 컴퓨터공학부 데이터베이스시스템
 * @version 2023학년도 2학기
 * @author 10조(김요셉, 박세현, 원현섭, 조승대)
 * MapReduceFramework.cpp
 */

#include "../MapReduceFramework/MapReduceFramework.h"

#include <iostream>
#include <mutex>
#include <thread>
#include <vector>
#include <fstream>
#include <sstream>

MapReduceFramework::MapReduceFramework(Mapper* m, Reducer* r) : mapper(m), reducer(r) {}


void worker(char* inputPath, int start, int end, std::mutex& m, std::vector<std::pair<std::string, int>>& output) {
	m.lock();
	std::ifstream inputFile(inputPath);
	if (!inputFile.is_open()) {
		std::cerr << "Error: Unable to open file " << inputPath << std::endl;
		return;
	}

	// 이전에는 파일을 열고 읽는 부분을 worker 함수로 이동
	std::string line;
	int currentLine = 1;
	while (getline(inputFile, line) && currentLine < end) {
		if (currentLine >= start) {
			// mapper.map 함수 호출
			mapper->map(line);
		}
		++currentLine;
	}

	inputFile.close();

	m.unlock();

}

void MapReduceFramework::run(char* inputPath, char* outputPath) {
    // TODO: MapReduce Framework 실행 로직 구현

	std::vector<std::thread> workers;
	std::mutex m;

	std::vector<std::pair<std::string, int>> mapOutput;

	for (int i=0; i<=20; i+=10) {
		workers.push_back(std::thread(worker, inputPath, i, i+10, std::ref(m)));
	}

	for (int i=0; i<3; ++i) {
		workers[i].join();
	}


}
