/*
 * @copyright 한국기술교육대학교 컴퓨터공학부 데이터베이스시스템
 * @version 2023학년도 2학기
 * @author 10조(김요셉, 박세현, 원현섭, 조승대)
 * MapReduceFramework.cpp
 */

#include "../MapReduceFramework/MapReduceFramework.h"

#include <iostream>
#include <mutex>
#include <thread>
#include <vector>

MapReduceFramework::MapReduceFramework(Mapper* m, Reducer* r) : mapper(m), reducer(r) {}


void worker(const std::vector<std::string>& input, int start, int end, std::mutex& m) {
	for (int i=start; i<end; ++i) {
		m.lock();
		std::cout << input[i] << std::endl;
		m.unlock();
	}
}

void MapReduceFramework::run(const std::vector<std::string>& input, std::vector<std::pair<std::string, int>>& output) {
    // TODO: MapReduce Framework 실행 로직 구현

	std::vector<std::thread> workers;
	std::mutex m;

	for (int i=3; i<10; i+=3) {
		workers.push_back(std::thread(worker, input, i-3, i, std::ref(m)));
	}

	for (int i=0; i<3; ++i) {
		workers[i].join();
	}


}
